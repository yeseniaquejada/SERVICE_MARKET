CREATE DATABASE SERVICE_MARKET
USE SERVICE_MARKET

-----------------------------------------------------------------------------------------------------------------------
/*CREACION DE LA TABLA ROLES*/
CREATE TABLE ROLES(
ID_ROL INT IDENTITY(1,1) PRIMARY KEY,
NOMBRE_ROL VARCHAR(40) NOT NULL)

/*PROCEDIMIENTO ALMACENADO PARA CREAR REGISTROS DE LA TABLA ROLES*/
CREATE PROCEDURE CREAR_ROLES(
@NOMBRE_ROL VARCHAR(40))
AS
BEGIN
	INSERT INTO ROLES(NOMBRE_ROL) VALUES (@NOMBRE_ROL)
END2

EXEC CREAR_ROLES 'Administrador'
EXEC CREAR_ROLES 'Pestador_servicios'
EXEC CREAR_ROLES 'Cliente'

/*PROCEDIMIENTO ALMACENADO PARA LEER REGISTROS DE LA TABLA ROLES */
CREATE PROCEDURE LEER_ROLES
AS
BEGIN
	SELECT * FROM ROLES 
END

EXEC LEER_ROLES

/*PROCEDIMIENTO ALMACENADO PARA ACTUALIZAR REGISTROS DE LA TABLA ROLES */
CREATE PROCEDURE ACTUALIZAR_ROLES(
@ID_ROL INT,
@NOMBRE_ROL VARCHAR(40))
AS
BEGIN
	UPDATE ROLES SET NOMBRE_ROL = @NOMBRE_ROL WHERE ID_ROL = @ID_ROL
END

EXEC ACTUALIZAR_ROLES 2,'Prestador de servicios'

/*PROCEDIMIENTO ALMACENADO PARA BORRAR REGISTROS DE LA TABLA ROLES */
CREATE PROCEDURE BORRAR_ROLES(
@ID_ROL INT)
AS
BEGIN
	DELETE FROM ROLES WHERE ID_ROL = @ID_ROL
END

EXEC BORRAR_ROLES 3

/*CREACION DE DISPARADOR QUE PERMITA INSERTAR UNA ROL SIEMPRE Y CUANDO EL NOMBRE SEA UNICO*/
CREATE TRIGGER TR_ROLES_INSERTAR
ON ROLES
FOR INSERT
AS
IF (SELECT COUNT (*) FROM INSERTED, ROLES
WHERE INSERTED.NOMBRE_ROL = ROLES.NOMBRE_ROL) > 1
BEGIN
ROLLBACK TRANSACTION
PRINT 'EL TIPO DE ROL SE ENCUENTRA REGISTRADO'
END
ELSE
PRINT 'EL TIPO DE ROL FUE INGRESADO EN LA BASE DE DATOS'
GO

EXEC CREAR_ROLES 'Administrador'

/*REINICIAR CONTADOR DEL ID*/
DBCC CHECKIDENT (ROLES, RESEED, 0)
-----------------------------------------------------------------------------------------------------------------------

/*CREACION DE LA TABLA CIUDAD*/
CREATE TABLE CIUDAD(
ID_CIUDAD INT PRIMARY KEY IDENTITY(1,1),
NOMBRE_CIUDAD VARCHAR(50) NOT NULL)

/*PROCEDIMIENTO ALMACENADO PARA CREAR REGISTROS DE LA TABLA CIUDAD*/
CREATE PROCEDURE CREAR_CIUDAD(
@NOMBRE_CIUDAD VARCHAR(50))
AS
BEGIN
	INSERT INTO CIUDAD(NOMBRE_CIUDAD) VALUES (@NOMBRE_CIUDAD)
END

EXEC CREAR_CIUDAD 'Medellin'
EXEC CREAR_CIUDAD 'Caldas'
EXEC CREAR_CIUDAD 'Barbosa'
EXEC CREAR_CIUDAD 'Sabaneta'
EXEC CREAR_CIUDAD 'La estrella'
EXEC CREAR_CIUDAD 'Itagui'
EXEC CREAR_CIUDAD 'Envigado'
EXEC CREAR_CIUDAD 'Bello'
EXEC CREAR_CIUDAD 'Girardota'
EXEC CREAR_CIUDAD 'Copacabana'

/*PROCEDIMIENTO ALMACENADO PARA LEER REGISTROS DE LA TABLA CIUDAD */
CREATE PROCEDURE LEER_CIUDAD
AS
BEGIN
	SELECT * FROM CIUDAD 
END

EXEC LEER_CIUDAD

/*PROCEDIMIENTO ALMACENADO PARA ACTUALIZAR REGISTROS DE LA TABLA CIUDAD */
CREATE PROCEDURE ACTUALIZAR_CIUDAD(
@ID_CIUDAD INT,
@NOMBRE_CIUDAD VARCHAR(50))
AS
BEGIN
	UPDATE CIUDAD SET NOMBRE_CIUDAD = @NOMBRE_CIUDAD WHERE ID_CIUDAD = @ID_CIUDAD
END

EXEC ACTUALIZAR_CIUDAD 10,'Copacabana'

/*PROCEDIMIENTO ALMACENADO PARA BORRAR REGISTROS DE LA TABLA CIUDAD */
CREATE PROCEDURE BORRAR_CIUDAD(
@ID_CIUDAD INT)
AS
BEGIN
	DELETE FROM CIUDAD WHERE ID_CIUDAD = @ID_CIUDAD
END

/*REINICIAR CONTADOR DEL ID*/
DBCC CHECKIDENT (CIUDAD, RESEED, 0)

-----------------------------------------------------------------------------------------------------------------------

/*CREACION DE LA TABLA USUARIOS*/
CREATE TABLE USUARIOS(
N_IDENTIFICACION VARCHAR(15) PRIMARY KEY,
TIPO_DOC VARCHAR(40) NOT NULL,
FECHA_NACIMIENTO DATE NOT NULL,
FECHA_EXPEDICION DATE NOT NULL,
NOMBRE_USU VARCHAR(60) NOT NULL,
APELLIDOS_USU VARCHAR(70) NOT NULL,
CELULAR_USU VARCHAR(20) NOT NULL,
CORREO_ELECTRONICO VARCHAR(100) NOT NULL,
CONTRASENA VARCHAR(500) NOT NULL,
GENERO VARCHAR(80) NOT NULL,
ID_CIUDAD_FK INT REFERENCES CIUDAD(ID_CIUDAD),
DIRECCION VARCHAR(200) NOT NULL
)

/*PROCEDIMIENTO ALMACENADO PARA CREAR REGISTROS DE LA TABLA USUARIOS*/
CREATE PROCEDURE REGISTRAR_USUARIO(
@TIPO_DOC VARCHAR(40),
@N_IDENTIFICACION VARCHAR(15),
@FECHA_NACIMIENTO DATE,
@FECHA_EXPEDICION DATE,
@NOMBRE_USU VARCHAR(60),
@APELLIDOS_USU VARCHAR(70),
@CELULAR_USU VARCHAR(20),
@GENERO VARCHAR(80),
@ID_CIUDAD_FK INT,
@DIRECCION VARCHAR(200),
@CORREO_ELECTRONICO VARCHAR(100),
@CONTRASENA VARCHAR(500),
@REGISTRADO BIT OUTPUT,
@MENSAJE VARCHAR(100) OUTPUT)
AS 
BEGIN
	IF(NOT EXISTS(SELECT * FROM USUARIOS WHERE CORREO_ELECTRONICO = @CORREO_ELECTRONICO))
	BEGIN 
		INSERT INTO USUARIOS(N_IDENTIFICACION,TIPO_DOC,FECHA_NACIMIENTO,FECHA_EXPEDICION,NOMBRE_USU,APELLIDOS_USU,CELULAR_USU,CORREO_ELECTRONICO,CONTRASENA,GENERO,ID_CIUDAD_FK,DIRECCION)
		VALUES (@N_IDENTIFICACION,@TIPO_DOC,@FECHA_NACIMIENTO,@FECHA_EXPEDICION,@NOMBRE_USU,@APELLIDOS_USU,@CELULAR_USU,@CORREO_ELECTRONICO,@CONTRASENA,@GENERO,@ID_CIUDAD_FK,@DIRECCION)
		SET @REGISTRADO = 1
		SET @MENSAJE = 'Usuario registrado'
	END
	ELSE
	BEGIN
		SET @REGISTRADO = 0
		SET @MENSAJE = 'Correo ya existe'
	END
END

/*DECLARAR VARIABLES DE SALIDA*/
DECLARE @REGISTRADO BIT, @MENSAJE VARCHAR(100)
/*REGISTRO DE ADMINISTRADORES*/
EXEC REGISTRAR_USUARIO 'Cedula de ciudadania','1001228354','2003-06-28','2022-01-01','Valentina','Zapata Florez','573196998087','Femenino',1,'Calle 45 #90-10','valentina@gmail.com','a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3',@REGISTRADO OUTPUT,@MENSAJE OUTPUT

EXEC REGISTRAR_USUARIO 'Cedula de ciudadania','1013376602','2004-01-13','2022-01-14','Yesenia','Quejada Rojas','573135293264','Femenino',8,'Calle 22 carrera 61 AA 51','yeyerojas1308@gmail.com','a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3',@REGISTRADO OUTPUT,@MENSAJE OUTPUT


/*PROCEDIMIENTO ALMACENADO PARA LEER REGISTROS DE LA TABLA USUARIOS */
CREATE PROCEDURE LEER_USUARIOS
AS
BEGIN
	SELECT * FROM USUARIOS
END 

EXEC LEER_USUARIOS

/*PROCEDIMIENTO ALMACENADO PARA ACTUALIZAR REGISTROS DE LA TABLA USUARIOS */
CREATE PROCEDURE ACTUALIZAR_USUARIOS(
@TIPO_DOC VARCHAR(40),
@N_IDENTIFICACION VARCHAR(15),
@FECHA_NACIMIENTO DATE,
@FECHA_EXPEDICION DATE,
@NOMBRE_USU VARCHAR(60),
@APELLIDOS_USU VARCHAR(70),
@CELULAR_USU VARCHAR(20),
@GENERO VARCHAR(80),
@ID_CIUDAD_FK INT,
@DIRECCION VARCHAR(200),
@CORREO_ELECTRONICO VARCHAR(100),
@CONTRASENA VARCHAR(500))
AS
BEGIN
	UPDATE USUARIOS SET TIPO_DOC = @TIPO_DOC, FECHA_NACIMIENTO = @FECHA_NACIMIENTO,
	FECHA_EXPEDICION = @FECHA_EXPEDICION, NOMBRE_USU = @NOMBRE_USU, APELLIDOS_USU = @APELLIDOS_USU,
	CELULAR_USU = @CELULAR_USU, GENERO = @GENERO, ID_CIUDAD_FK = @ID_CIUDAD_FK, DIRECCION = @DIRECCION,
	CORREO_ELECTRONICO = @CORREO_ELECTRONICO, CONTRASENA = @CONTRASENA
	WHERE N_IDENTIFICACION = @N_IDENTIFICACION
END

EXEC ACTUALIZAR_USUARIOS 'Cedula de ciudadania','1013376602','2004-01-13','2022-01-14','Yesenia','Quejada Rojas','573135293264','Femenino',8,'Calle 22 carrera 61 AA 51','yeyerojas1308@gmail.com','a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3'

/*PROCEDIMIENTO ALMACENADO PARA BORRAR REGISTROS DE LA TABLA USUARIOS */
CREATE PROCEDURE BORRAR_USUARIOS(
@N_IDENTIFICACION VARCHAR(15))
AS
BEGIN
	DELETE FROM USUARIOS WHERE N_IDENTIFICACION = @N_IDENTIFICACION
END

EXEC BORRAR_USUARIOS '31793795'

/*PROCEDIMIENTO ALMACENADO PARA VALIDAR USUARIOS*/
CREATE PROCEDURE VALIDAR_USUARIO(
@CORREO_ELECTRONICO VARCHAR(100),
@CONTRASENA VARCHAR(500))
AS
BEGIN
	IF(EXISTS(SELECT * FROM USUARIOS WHERE CORREO_ELECTRONICO = @CORREO_ELECTRONICO AND CONTRASENA = @CONTRASENA))
		SELECT * FROM USUARIOS WHERE CORREO_ELECTRONICO = @CORREO_ELECTRONICO AND CONTRASENA = @CONTRASENA
	ELSE
		SELECT '0'
END

EXEC VALIDAR_USUARIO 'yeyerojas1308@gmail.com','a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3'

/*CREACION DE DISPARADOR QUE BLOQUEE ACTUALIZAR EL NUMERO DE DOCUMENTO DE UN USUARIO*/
CREATE TRIGGER TR_USUARIOS_ACTUALIZAR
ON USUARIOS
FOR UPDATE
AS
IF UPDATE(N_IDENTIFICACION)
BEGIN
PRINT 'NO SE PUEDE ACTUALIZAR EL NUMERO DE IDENTIFICACION DE UN USUARIO'
ROLLBACK TRANSACTION
END

UPDATE USUARIOS SET TIPO_DOC = 'Cedula de ciudadanía', N_IDENTIFICACION = '1013376602', FECHA_NACIMIENTO = '2004-01-13',
FECHA_EXPEDICION = '2022-01-14', NOMBRE_USU = 'Yesenia', APELLIDOS_USU = 'Quejada Rojas',
CELULAR_USU = '573135293264', GENERO = 'Femenino', ID_CIUDAD_FK = 8, DIRECCION = 'Calle 22 carrera 61 AA 51',
CORREO_ELECTRONICO = 'yeyerojas1308@gmail.com', CONTRASENA = 'a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3'
WHERE N_IDENTIFICACION = '1013376602'

-----------------------------------------------------------------------------------------------------------------------

/*CREACION DE LA TABLA INTERMEDIA ASIGNACION_ROL*/
CREATE TABLE ASIGNACION_ROL(
ID_ROL_FK INT REFERENCES ROLES(ID_ROL) DEFAULT 3,
IDENTIFICACION_U_FK VARCHAR(15) REFERENCES USUARIOS(N_IDENTIFICACION)
)

/*PROCEDIMIENTO ALMACENADO PARA CREAR REGISTROS DE LA TABLA ASIGNACION_ROL*/
CREATE PROCEDURE CREAR_ASIGNACION_ROL(
@IDENTIFICACION_U_FK VARCHAR(15))
AS
BEGIN
	INSERT INTO ASIGNACION_ROL(IDENTIFICACION_U_FK) VALUES (@IDENTIFICACION_U_FK)
END

EXEC CREAR_ASIGNACION_ROL '70877770'

/*PROCEDIMIENTO ALMACENADO PARA LEER REGISTROS DE LA TABLA ASIGNACION_ROL */
CREATE PROCEDURE LEER_ASIGNACION_ROL
AS
BEGIN
	SELECT * FROM ASIGNACION_ROL
END

EXEC LEER_ASIGNACION_ROL

/*PROCEDIMIENTO ALMACENADO PARA ACTUALIZAR REGISTROS DE LA TABLA ASIGNACION_ROL*/
CREATE PROCEDURE ACTUALIZAR_ASIGNACION_ROL(
@ID_ROL_FK INT,
@IDENTIFICACION_U_FK VARCHAR(15))
AS
BEGIN
	UPDATE ASIGNACION_ROL SET ID_ROL_FK = @ID_ROL_FK WHERE IDENTIFICACION_U_FK = @IDENTIFICACION_U_FK
END

EXEC ACTUALIZAR_ASIGNACION_ROL 1, '1013376602'
-----------------------------------------------------------------------------------------------------------------------

/*CREACION DE LA TABLA CATEGORIAS*/
CREATE TABLE CATEGORIAS(
ID_CATEGORIA INT IDENTITY(1,1) PRIMARY KEY,
NOMBRE_CAT VARCHAR(MAX) NOT NULL,
DESCRIPCION_CAT VARCHAR(MAX) NOT NULL)

/*PROCEDIMIENTO ALMACENADO PARA CREAR REGISTROS DE LA TABLA CATEGORIAS*/
CREATE PROCEDURE CREAR_CATEGORIAS(
@NOMBRE_CAT VARCHAR(MAX),
@DESCRIPCION_CAT VARCHAR(MAX))
AS
BEGIN
	INSERT INTO CATEGORIAS(NOMBRE_CAT,DESCRIPCION_CAT) VALUES (@NOMBRE_CAT,@DESCRIPCION_CAT)
END

EXEC CREAR_CATEGORIAS 'Mantenimiento', 'Orientada a solucionar y prevenir las posibles averías que pueda haber en equipos, máquinas e instalaciones para conservar y garantizar su óptimo funcionamiento.'
EXEC CREAR_CATEGORIAS 'Trabajos domésticos', 'Toda la ayuda doméstica que necesitas en casa con expertas en orden, limpieza y desinfección.'
EXEC CREAR_CATEGORIAS 'Remodelación y abañilería', 'Orientada en la construcción, renovación y reparación de estructuras, paredes, muros, partes de edificios, casas y más.'
EXEC CREAR_CATEGORIAS 'Salud y belleza', 'Orientada a la prestación de servicios desde los diferentes campos de la salud y la belleza como lo son cortes, peinados, maquillajes, manicure, pedicura, masajes, etc.'

/*PROCEDIMIENTO ALMACENADO PARA LEER REGISTROS DE LA TABLA CATEGORIAS */
CREATE PROCEDURE LEER_CATEGORIAS
AS
BEGIN
	SELECT * FROM CATEGORIAS 
END

EXEC LEER_CATEGORIAS

/*PROCEDIMIENTO ALMACENADO PARA ACTUALIZAR REGISTROS DE LA TABLA CATEGORIAS */
CREATE PROCEDURE ACTUALIZAR_CATEGORIAS(
@ID_CATEGORIA INT,
@NOMBRE_CAT VARCHAR(MAX),
@DESCRIPCION_CAT VARCHAR(MAX))
AS
BEGIN
	UPDATE CATEGORIAS SET NOMBRE_CAT = @NOMBRE_CAT, DESCRIPCION_CAT = @DESCRIPCION_CAT WHERE ID_CATEGORIA = @ID_CATEGORIA
END

EXEC ACTUALIZAR_CATEGORIAS 2, 'Tabajos domésticos', 'Toda la ayuda doméstica que necesitas en casa con expertas en orden, limpieza y desinfección.'

/*PROCEDIMIENTO ALMACENADO PARA BORRAR REGISTROS DE LA TABLA CATEGORIAS */
CREATE PROCEDURE BORRAR_CATEGORIAS(
@ID_CATEGORIA INT)
AS
BEGIN
	DELETE FROM CATEGORIAS WHERE ID_CATEGORIA = @ID_CATEGORIA
END

EXEC BORRAR_CATEGORIAS 2

/*CREACION DE DISPARADOR QUE PERMITA INSERTAR UNA CATEGORIA SIEMPRE Y CUANDO EL NOMBRE SEA UNICO*/
CREATE TRIGGER TR_CATEGORIAS_INSERTAR
ON CATEGORIAS
FOR INSERT
AS
IF (SELECT COUNT (*) FROM INSERTED, CATEGORIAS
WHERE INSERTED.NOMBRE_CAT = CATEGORIAS.NOMBRE_CAT) > 1
BEGIN
ROLLBACK TRANSACTION
PRINT 'LA CATEGORIA SE ENCUENTRA REGISTRADA'
END
ELSE
PRINT 'LA CATEGORIA FUE INGRESADA EN LA BASE DE DATOS'
GO

EXEC CREAR_CATEGORIAS 'Mantenimiento', 'Orientada a solucionar y prevenir las posibles averías que pueda haber en equipos, máquinas e instalaciones para conservar y garantizar su óptimo funcionamiento.'

-----------------------------------------------------------------------------------------------------------------------
 
/*CREACION DE LA TABLA SERVICIOS*/
CREATE TABLE SERVICIOS(
ID_SERVICIO INT IDENTITY(1,1) PRIMARY KEY,
NOMBRE_SER VARCHAR(70) NOT NULL,
PRECIO_SER DECIMAL NOT NULL,
DESCRIPCION_BREVE VARCHAR(500) NOT NULL,
TERMINOS_SER VARCHAR(MAX) NOT NULL,
ID_CATEGORIA_FK INT REFERENCES CATEGORIAS(ID_CATEGORIA)
)

/*PROCEDIMIENTO ALMACENADO PARA CREAR REGISTROS DE LA TABLA SERVICIOS*/
CREATE PROCEDURE CREAR_SERVICIOS(
@NOMBRE_SER VARCHAR(70),
@PRECIO_SER DECIMAL,
@DESCRIPCION_BREVE VARCHAR(500),
@TERMINOS_SER VARCHAR(MAX),
@ID_CATEGORIA_FK INT
)
AS 
BEGIN
	INSERT INTO SERVICIOS(NOMBRE_SER,PRECIO_SER,DESCRIPCION_BREVE,TERMINOS_SER,ID_CATEGORIA_FK) 
	VALUES (@NOMBRE_SER,@PRECIO_SER,@DESCRIPCION_BREVE,@TERMINOS_SER,@ID_CATEGORIA_FK)
END

EXEC CREAR_SERVICIOS 'Depilación de cejas con cera',24000,'Cuidado de tus cejas y la forma natural que ya tienen, para depilarlas se usa cera tipo miel caliente en la zona.',
'Previamente indicar si sufre algún tipo de alergia a picaduras de abejas y/o intolerancia a la miel, ya que el producto de depilación contiene estos derivados.',4

/*PROCEDIMIENTO ALMACENADO PARA LEER REGISTROS DE LA TABLA SERVICIOS */
CREATE PROCEDURE LEER_SERVICIOS
AS
BEGIN
	SELECT * FROM SERVICIOS 
END

EXEC LEER_SERVICIOS

/*PROCEDIMIENTO ALMACENADO PARA ACTUALIZAR REGISTROS DE LA TABLA SERVICIOS */
CREATE PROCEDURE ACTUALIZAR_SERVICIOS(
@ID_SERVICIO INT,
@NOMBRE_SER VARCHAR(70),
@PRECIO_SER DECIMAL,
@DESCRIPCION_BREVE VARCHAR(500),
@TERMINOS_SER VARCHAR(MAX),
@ID_CATEGORIA_FK INT
)
AS
BEGIN
	UPDATE SERVICIOS SET NOMBRE_SER = @NOMBRE_SER, PRECIO_SER = @PRECIO_SER, DESCRIPCION_BREVE = @DESCRIPCION_BREVE,
	TERMINOS_SER = @TERMINOS_SER, ID_CATEGORIA_FK = @ID_CATEGORIA_FK WHERE ID_SERVICIO = @ID_SERVICIO
END

/*PROCEDIMIENTO ALMACENADO PARA BORRAR REGISTROS DE LA TABLA SERVICIOS */
CREATE PROCEDURE BORRAR_SERVICIOS(
@ID_SERVICIO INT)
AS
BEGIN
	DELETE FROM SERVICIOS WHERE ID_SERVICIO = @ID_SERVICIO
END

EXEC BORRAR_SERVICIOS 4

/*PROCEDIMIENTO ALMACENADO PARA CONSULTAR SERVICIOS INNER JOIN CON TABLA CATEGORIAS*/
CREATE PROCEDURE CONSULTAR_SERVICIOS
AS 
BEGIN
	SELECT ID_SERVICIO, NOMBRE_SER, PRECIO_SER, DESCRIPCION_BREVE, NOMBRE_CAT FROM 
	SERVICIOS INNER JOIN CATEGORIAS 
	ON SERVICIOS.ID_CATEGORIA_FK = CATEGORIAS.ID_CATEGORIA
END

EXEC CONSULTAR_SERVICIOS

/*PROCEDIMIENTO ALMACENADO PARA BUSCAR SERVICIOS POR NOMBRE*/
CREATE PROCEDURE BUSQUEDAD_SERVICIOS(
@NOMBRE_SER VARCHAR(70))
AS
BEGIN
	SELECT ID_SERVICIO, NOMBRE_SER, PRECIO_SER,DESCRIPCION_BREVE, NOMBRE_CAT FROM 
	SERVICIOS INNER JOIN CATEGORIAS 
	ON SERVICIOS.ID_CATEGORIA_FK = CATEGORIAS.ID_CATEGORIA
	WHERE NOMBRE_SER LIKE '%'+@NOMBRE_SER+'%'
END

EXEC BUSQUEDAD_SERVICIOS 'Limpieza'

-----------------------------------------------------------------------------------------------------------------------

/*CREACION DE LA TABLA DETALLE_SERVICIOS(PUBLICACION)*/
CREATE TABLE DETALLE_SERVICIOS(
ID_SERVICIO_FK INT REFERENCES SERVICIOS(ID_SERVICIO),
IDENTIFICACION_U_FK VARCHAR(15) REFERENCES USUARIOS(N_IDENTIFICACION),
FECHA_INICIO DATE NOT NULL DEFAULT GETDATE(),
ESTADO_DS VARCHAR(20) DEFAULT 'Activo')

/*PROCEDIMIENTO ALMACENADO PARA CREAR REGISTROS DE LA TABLA DETALLE_SERVICIOS*/
CREATE PROCEDURE CREAR_DETALLE_SERVICIOS(
@ID_SERVICIO_FK INT,
@IDENTIFICACION_U_FK VARCHAR(15))
AS
BEGIN
	INSERT INTO DETALLE_SERVICIOS(ID_SERVICIO_FK,IDENTIFICACION_U_FK) VALUES 
	(@ID_SERVICIO_FK,@IDENTIFICACION_U_FK)
END

EXEC CREAR_DETALLE_SERVICIOS 3, 31793795

/*PROCEDIMIENTO ALMACENADO PARA LEER REGISTROS DE LA TABLA DETALLE_SERVICIOS */
CREATE PROCEDURE LEER_DETALLE_SERVICIOS
AS
BEGIN
	SELECT * FROM DETALLE_SERVICIOS
END

EXEC LEER_DETALLE_SERVICIOS

/*PROCEDIMIENTO ALMACENADO PARA ACTUALIZAR REGISTROS DE LA TABLA DETALLE_SERVICIOS */
CREATE PROCEDURE ACTUALIZAR_DETALLE_SERVICIOS(
@ID_SERVICIO_FK INT,
@FECHA_INICIO DATE,
@ESTADO_DS VARCHAR(20))
AS
BEGIN
	UPDATE DETALLE_SERVICIOS SET FECHA_INICIO = @FECHA_INICIO, ESTADO_DS = @ESTADO_DS 
	WHERE ID_SERVICIO_FK = @ID_SERVICIO_FK
END

EXEC ACTUALIZAR_DETALLE_SERVICIOS 1,'2022-11-20', 'Activo'
EXEC ACTUALIZAR_DETALLE_SERVICIOS 2,'2022-11-20', 'Desactivo'

----------------------------------------------------------------------------------------------------------------------

/*VISTA MAS INFORMACION SOBRE LA PUBLICACION DEL SERVICIO
TABLAS: DETALLE_SERVICIOS // SERVICIOS // CATEGORIAS // USUARIOS // CIUDAD*/
CREATE VIEW PUBLICACION_SERVICIOS 
AS
SELECT FECHA_INICIO, ESTADO_DS, ID_SERVICIO, NOMBRE_SER, PRECIO_SER, DESCRIPCION_BREVE, 
TERMINOS_SER, NOMBRE_CAT, NOMBRE_USU, APELLIDOS_USU, CELULAR_USU, CORREO_ELECTRONICO, NOMBRE_CIUDAD
FROM
DETALLE_SERVICIOS INNER JOIN SERVICIOS 
ON DETALLE_SERVICIOS.ID_SERVICIO_FK = SERVICIOS.ID_SERVICIO 
INNER JOIN CATEGORIAS 
ON SERVICIOS.ID_CATEGORIA_FK = CATEGORIAS.ID_CATEGORIA
INNER JOIN USUARIOS
ON DETALLE_SERVICIOS.IDENTIFICACION_U_FK = USUARIOS.N_IDENTIFICACION
INNER JOIN CIUDAD
ON USUARIOS.ID_CIUDAD_FK = CIUDAD.ID_CIUDAD WHERE ESTADO_DS = 'Activo'

/*PROCEDIMIENTO ALMACENADO PARA CONSULTAR VISTA PUBLICACION SERVICIOS*/
CREATE PROCEDURE CONSULTAR_PUBLICACION(
@ID_SERVICIO INT)
AS
BEGIN
	SELECT * FROM PUBLICACION_SERVICIOS WHERE ID_SERVICIO = @ID_SERVICIO
END

EXEC CONSULTAR_PUBLICACION 1 /*ACTIVO*/
EXEC CONSULTAR_PUBLICACION 2 /*DESACTIVO*/

----------------------------------------------------------------------------------------------------------------------

/*CREACION DE LA TABLA HISTORIAL DE SERVICIOS ELIMINADOS*/
CREATE TABLE [HISTORIAL_SERVICIOS](
	[ID_SERVICIO] [int] NOT NULL,
	[NOMBRE_SER] [varchar](70) NOT NULL,
	[PRECIO_SER] [decimal](18, 0) NOT NULL,
	[DESCRIPCION_BREVE] [varchar](500) NOT NULL,
	[TERMINOS_SER] [varchar](max) NOT NULL,
	[ID_CATEGORIA_FK] [int] NULL)

/*CREACION DE DISPARADOR PARA QUE AGREGUE SERVICIOS ELIMINADOS AL HISTORIAL*/
CREATE TRIGGER TR_HISTORIAL_SERVICIOS
ON SERVICIOS FOR DELETE 
AS 
BEGIN 
	INSERT INTO [HISTORIAL_SERVICIOS]
	SELECT * FROM deleted
END 
GO

/*PROCEDIMIENTO ALMACENADO PARA LEER LOS REGISTROS DE LA TABLA HISTORIAL_SERVICIOS*/
CREATE PROCEDURE LEER_HISTORIAL_SERVICIOS 
AS
BEGIN
	SELECT * FROM HISTORIAL_SERVICIOS
END

EXEC LEER_HISTORIAL_SERVICIOS 

----------------------------------------------------------------------------------------------------------------------

/*REINICIAR CONTADOR DEL ID*/
DBCC CHECKIDENT (ROLES, RESEED, 0)

/*FUNCION PARA CONTAR SERVICIOS DISPONIBLES*/
CREATE FUNCTION SERVICIOS_DISPONIBLES() 
RETURNS INT
AS
BEGIN
DECLARE @DISPONIBLES INT
SELECT  @DISPONIBLES = COUNT (*) FROM SERVICIOS
RETURN @DISPONIBLES
END

PRINT DBO.SERVICIOS_DISPONIBLES()

